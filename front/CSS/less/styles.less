@charset "UTF-8";
//导入的less文件可以省略扩展名
//@import "library";
//@import "typo.css";
////////////////////////////////////////////////////////////////////////////////////////
//默认值
a{ color: #000028; }
.mixin (@a) when (@a > 0) {
  color: red;
}
.mixin (@a) when (default()) {
  color: blue;
}
.a28{
  .mixin (-3);
}
/*.a28 {
  color: blue;
}*/
////////////////////////////////////////////////////////////////////////////////////////
//高级语句
a{ color: #000027; }
.desktop-and-old-ie27(@rules27) {
  @media screen and (min-width: 1200) { @rules27(); }
  html.lt-ie9 &                       { @rules27(); }
}

.header27 {
  background-color: blue;

  .desktop-and-old-ie27({
    background-color: red;
  });
}
/*.header27 {
  background-color: blue;
}
@media screen and (min-width: 1200) {
  .header27 {
    background-color: red;
  }
}
html.lt-ie9 .header27 {
  background-color: red;
}*/
////////////////////////////////////////////////////////////////////////////////////////
//选择语句
a{ color: #000026; }
.mixin26(dark; @color26) {
  color: darken(@color26, 10%);
}
.mixin26(light; @color26) {
  color: lighten(@color26, 10%);
}
.mixin26(@_26; @color26) {
  display: block;
}
@switch26: light;
.class26 {
  .mixin26(@switch26; #888);
}
/*.class26 {
  color: #a2a2a2;
  display: block;
}*/
////////////////////////////////////////////////////////////////////////////////////////
//media下extend的使用
a{ color: #000025; }
@media screen {
  .screenClass25:extend(.selector25) {}
  .selector25 {
    color: red;
  }
  @media (min-width: 1023px) {
    .screen25:extend(.selector25) {}
    .selector25 {
      color: blue;
    }
  }
}
.topLevel25:extend(.selector25) {}
/*@media screen {
.selector25, .screenClass25, .topLevel25 {
    color: red;
}
}
@media screen and (min-width: 1023px) {
.selector25, .screen25, .topLevel25 {
    color: blue;
}
}*/
////////////////////////////////////////////////////////////////////////////////////////
//@@可以用变量名的值作为变量名称
a{ color: #000024; }
@fnord24:  "I am fnord.";
@var24:    "fnord24";
.p24 { content: @@var24; }
/*.p24 { content: "I am fnord."; }*/
////////////////////////////////////////////////////////////////////////////////////////
//&被完全替换
a{ color: #000023; }
.button23-1 {
  &-ok {
    background-image: url("ok.png");
  }
  &-cancel {
    background-image: url("cancel.png");
  }

  &-custom {
    background-image: url("custom.png");
  }
}
/*.button23-1-ok {
  background-image: url("ok.png");
}
.button23-1-cancel {
  background-image: url("cancel.png");
}
.button23-1-custom {
  background-image: url("custom.png");
}*/
.header23-2 {
  .menu23-2 {
    border-radius: 5px;
    .no-borderradius23-2 & {
      background-image: url('images/button-background.png');
    }
  }
}
/*.header23-2 .menu23-2 {
  border-radius: 5px;
}
.no-borderradius23-2 .header23-2 .menu23-2 {
  background-image: url('images/button-background.png');
}*/
.ul23-3, .li23-3 {
  border-top: 2px dotted #366;
  & + & {
    border-top: 0;
  }
}
/*.ul23-3, .li23-3 {
  border-top: 2px dotted #366;
}
.ul23-3 + .ul23-3, .ul23-3 + .li23-3, .li23-3 + .ul23-3, .li23-3 + .li23-3 {
  border-top: 0;
}*/
////////////////////////////////////////////////////////////////////////////////////////
//合并语句,需要在每个需要合并的属性名后面添加一个 +
a{ color: #000022; }
.mixin22() {
  box-shadow+: inset 0 0 10px #555;
}
.myclass22 {
  .mixin22();
  box-shadow+: 0 0 20px black;
}
/*.myclass22 { box-shadow: inset 0 0 10px #555, 0 0 20px black; }*/
////////////////////////////////////////////////////////////////////////////////////////
//循环语句
a{ color: #000021; }
.loop21(@counter21) when (@counter21 > 0) {
  .loop21((@counter21 - 1));
  width: (10px * @counter21);
}
.div21 {
  .loop21(5);
}
/*.div21 {
  width: 10px;
  width: 20px;
  width: 30px;
  width: 40px;
  width: 50px;
}*/
////////////////////////////////////////////////////////////////////////////////////////
//条件语句
a{ color: #000020; }
.mixin20 (@a20) when (lightness(@a20) >= 50%) {
  background-color: black;
}
.mixin20 (@a20) when (lightness(@a20) < 50%) {
  background-color: white;
}
.mixin20 (@a20) {
  color: @a20;
}
.class20-1 { .mixin20(#ddd) }
.class20-2 { .mixin20(#555) }
/*.class20-1 { background-color: black; color: #ddd; }
.class20-2 { background-color: white; color: #555; }*/
////////////////////////////////////////////////////////////////////////////////////////
//变量可以通过函数调用的方式引入
a{ color: #000019; }
/*@import (inline) "typo.css";//引入外部文件，但不加工他们。
@import (less) "typo.css";//加载less
@import (css) "typo.css";//加载css
@import (once) "typo.css";//同一类名只加载一次
@import (multiple) "typo.css";//同一类名加载多次*/
////////////////////////////////////////////////////////////////////////////////////////
//变量可以通过函数调用的方式引入
a{ color: #000018; }
.mixin18() {
  @width18:  100%;
  @height18: 200px;
}
.caller18 {
  .mixin18();
  width:  @width18;
  height: @height18;
}
/*.caller18 { width:  100%; height: 200px; }*/
////////////////////////////////////////////////////////////////////////////////////////
//@arguments在函数内可以排列所有参数
a{ color: #000017; }
.box-shadow17(@x: 0; @y: 0; @blur: 1px; @color: #000) {
  -webkit-box-shadow: @arguments;
  -moz-box-shadow: @arguments;
  box-shadow: @arguments;
}
.big-block17 {
  .box-shadow17(2px; 5px);
}
/*.big-block17 {
  -webkit-box-shadow: 2px 5px 1px #000;
  -moz-box-shadow: 2px 5px 1px #000;
  box-shadow: 2px 5px 1px #000;
}*/
////////////////////////////////////////////////////////////////////////////////////////
//参数可以带着参数名传入
a{ color: #000016; }
.mixin16(@color16: black; @margin16: 10px; @padding16: 20px) {
  color: @color16;
  margin: @margin16;
  padding: @padding16;
}
.class16-1 {
  .mixin16(@margin16: 20px; @color16: #33acfe);
}
.class16-2 {
  .mixin16(#efca44; @padding16: 40px);
}
/*.class16-1 {
  color: #33acfe;
  margin: 20px;
  padding: 20px;
}
.class16-2 {
  color: #efca44;
  margin: 10px;
  padding: 40px;
}*/
////////////////////////////////////////////////////////////////////////////////////////
//参数分隔用，号或；号都可。名称后面带：号是默认值。传入参数后最多引用后面一个默认值，不再继续引用默认值。
a{ color: #000015; }
.mixin15(@color15) {
  color: @color15;
}
.mixin15(@color15; @padding15:2px) {
  color: @color15;
  padding: @padding15;
}
.mixin15(@color15; @padding15; @margin15: 2px) {
  color: @color15;
  padding: @padding15;
  margin: @margin15 @margin15 @margin15 @margin15;
}
.some15{
  .mixin15(#008000);
}
/*.some15 {
  color: #008000;
  padding: 2px;
}*/
////////////////////////////////////////////////////////////////////////////////////////
//.foo调用时可以传参数，也可传任意值。调用后面可以加!important，则类中所有属性加!important
a{ color: #000014; }
.foo14 (@bg14: #f5f5f5, @color14: #990000) {
  background: @bg14;
  color: @color14;
}
.unimportant14 {
  .foo14(#111, #222) !important;
}
.important14 {
  .foo14(2);
}
/*.unimportant14 {
  background: #111111 !important;
  color: #222222 !important;
}
.important14 {
  background: 2;
  color: #990000;
}*/
////////////////////////////////////////////////////////////////////////////////////////
//.my-inline-block作为一个函数调用, 如果类名中带()则结果不显示该类
a{ color: #000013; }
.my-inline-block13() { display: inline-block; font-size: 0; }
.thing13-1 {
  .my-inline-block13;
}
.thing13-2 {
  .my-inline-block13();
}
/*.thing13-1 { display: inline-block; font-size: 0; }
.thing13-2 { display: inline-block; font-size: 0; }*/
////////////////////////////////////////////////////////////////////////////////////////
//&的位置，作为父级类替换
a{ color: #000012; }
.bucket12 {
  width: 100%;
  .tr12 & { color: blue; }
}
.some-class12:extend(.bucket12 .tr12 .bucket12) {}
/*.bucket12 { width: 100%; }
.tr12 .bucket12, .some-class12 { color: blue; }*/
////////////////////////////////////////////////////////////////////////////////////////
//&:extend可将本类名扩展到其他类
a{ color: #000011; }
/*
.a:extend(.b) {}只是.b
.c:extend(.d all) {}包含.d的所有，如".d" 或 ".x.d" 或 ".d.x"
.e:extend(.f, .g) {}包含两类
*/
//与上方效果一致
.nav11 {
  &:extend(.inline11 all);
  background: blue;
}
a.inline11 { color: red; }
/*.nav11 { background: blue; }
a.inline11, nav11 { color: red; }*/
////////////////////////////////////////////////////////////////////////////////////////
//引用文件相当于在此位置插入文件,同一作用链下，以最后一个赋值为准。
a{ color: #000010; }
.import10-3{ color: @base-color10; }
@import "styles2";
@base-color10: red;
.import10-1 { color: @base-color10; }
/*.import10-3 { color: red; }
.import10-2 { color: red; }
.import10-1 { color: red; }*/
////////////////////////////////////////////////////////////////////////////////////////
//@{变量名}的形式，可以用在非属性值上
a{ color: #000009; }
@mySelector9: banner9;
.@{mySelector9} { font-weight: bold; line-height: 40px; margin: 0 auto; }
/*.banner9 { font-weight: bold; line-height: 40px; margin: 0 auto; }*/
@images9: "../img";
.body9 { color: #444; background: url("@{images9}/white-sand.png"); }
/*.body9 { background: url("../img/white-sand.png") repeat scroll 0 0 rgba(0, 0, 0, 0); color: #444; }*/
@property9: color;
.widget9 { @{property9}: #0ee; background-@{property9}: #999; }
/*.widget9 { background-color: #999; color: #0ee; }*/
////////////////////////////////////////////////////////////////////////////////////////
//变量存在作用域，跟js差不多
a{ color: #000008; }
@var8: red;
#page8 { @var8: white;
  #header8 { color: @var8; }
}
@var8-2: red;
#page8-2 {
  #header8-2 { color: @var8-2; }
  @var8-2: white;
}
/*#page8 #header8 { color: white; }
#page8-2 #header8-2 { color: white; }*/
////////////////////////////////////////////////////////////////////////////////////////
//可以引用类中嵌套的类，要求路径要写全
a{ color: #000007; }
#bundle7 {
  .button7 { display: block; border: 1px solid black; background-color: grey;
    &:hover { background-color: white }
  }
  .tab7 { color: #000; }
  .citation7 { color: #000; }
}
#header7 .a7 { color: orange;
  #bundle7 > .button7;
}
/*#bundle7 .button7 { background-color: grey; border: 1px solid black; display: block; }
#bundle7 .button7:hover { background-color: white; }
#bundle7 .tab7 { color: #000; }
#bundle7 .citation7 { color: #000; }
#header7 .a7 { background-color: grey; border: 1px solid black; color: orange; display: block; }
#header7 .a7:hover { background-color: white; }*/
////////////////////////////////////////////////////////////////////////////////////////
//类中可以执行特性函数
a{ color: #000006; }
@base6: #f04615;
@width6: 0.5;
.class6 { width: percentage(@width6); color: saturate(@base6, 5%); background-color: spin(lighten(@base6, 25%), 8); }
/*.class6 { background-color: #f8b38d; color: #f6430f; width: 50%; }*/
////////////////////////////////////////////////////////////////////////////////////////
//@变量可以在类中做加减乘除
a{ color: #000005; }
@base5: 5%;
@filler5: @base5 * 2;
@other5: @base5 + @filler5;
@base-color5: #222;
.log5 { color: #888 / 4; background-color: @base-color5 + #111; height: 100% / 2 + @filler5; margin: 1px+5px 7+9px; }
/*.log5 { background-color: #333333; color: #222222; height: 60%; margin: 6px 16px; }*/
////////////////////////////////////////////////////////////////////////////////////////
//&:表示伪类
a{ color: #000004; }
.clearfix4 { display: block; zoom: 1;
  &:after { content: " "; display: block; font-size: 0; height: 0; clear: both; visibility: hidden; }
}
/*.clearfix4 { display: block; }
.clearfix4:after { clear: both; content: " "; display: block; font-size: 0; height: 0; visibility: hidden; }*/
////////////////////////////////////////////////////////////////////////////////////////
//{}中可以嵌套层级关系
a{ color: #000003; }
#header3 { color: black;
  .navigation3 { font-size: 12px; }
  .logo3 { width: 300px; }
}
/*#header3 { color: black; }
#header3 .navigation3 { font-size: 12px; }
#header3 .logo3 { width: 300px; }*/
////////////////////////////////////////////////////////////////////////////////////////
//.类可以当变量引用
a{ color: #000002; }
.bordered2 { border-top: dotted 1px black; border-bottom: solid 2px black; }
#menu2 .a2 { color: #111; .bordered2; }
.post2 .a2 { color: red; .bordered2; }
/*.bordered2 { border-top: dotted 1px black; border-bottom: solid 2px black; }
#menu2 .a2 { border-bottom: 2px solid black; border-top: 1px dotted black; color: #111; }
.post2 .a2 { border-bottom: 2px solid black; border-top: 1px dotted black; color: red; }*/
////////////////////////////////////////////////////////////////////////////////////////
//@为变量，可做加减赋值，由于变量只能定义一次，实际上他们就是“常量”
a{ color: #000001; }
@nice-blue1: #5B83AD;
@light-blue1: @nice-blue1 + #111;
#header1 { color: @light-blue1; }
/*#header1 { color: #6c94be; }*/
